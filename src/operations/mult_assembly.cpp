//
// Created by Gustavo Munhoz Correa on 28/03/25.
//

#include <string>
#include <sstream>

/// Cria o código em assembly para fazer a operação de multiplicação
/// de números float 16 bits no formato IEEE754.
std::string generateMulAssembly() {
    std::stringstream ss;
    ss << ";---------------------------------------------------------\n";
    ss << "; mul_f16: Multiplicação de dois half-precision IEEE-754\n";
    ss << "; Entradas: Operando A em R25:R24, Operando B em R23:R22\n";
    ss << "; Saída: Resultado em R25:R24\n";
    ss << "; Callee-Saved: r18-r21, r26-r27, r30-r31\n";
    ss << "; Volatile: r0, r1, r16, r17, r28, r29\n";
    ss << ";---------------------------------------------------------\n";
    ss << "mul_f16:\n";
    ss << "    push r18\n";
    ss << "    push r19\n";
    ss << "    push r20\n";
    ss << "    push r21\n";
    ss << "    push r26\n";
    ss << "    push r27\n";
    ss << "    push r30\n";
    ss << "    push r31\n";
    ss << "\n";
    ss << "    ; --- Calcular Sinal do Resultado -> r20 (Callee-Saved) ---\n";
    ss << "    mov R20, R25\n";
    ss << "    andi R20, 0x80    ; Sinal A\n";
    ss << "    mov R21, R23\n";
    ss << "    andi R21, 0x80    ; Sinal B\n";
    ss << "    eor R20, R21      ; r20 = Sinal Resultado (0x00 ou 0x80)\n";
    ss << "\n";
    ss << "    ; --- Extrair Expoentes -> r26, r27 (Callee-Saved) ---\n";
    ss << "    mov R26, R25\n";
    ss << "    andi R26, 0x7C    ; Isolar bits de expoente A\n";
    ss << "    lsr R26\n";
    ss << "    lsr R26           ; r26 = Expoente A (0-31, com bias)\n";
    ss << "    mov R27, R23\n";
    ss << "    andi R27, 0x7C    ; Isolar bits de expoente B\n";
    ss << "    lsr R27\n";
    ss << "    lsr R27           ; r27 = Expoente B (0-31, com bias)\n";
    ss << "\n";
    ss << "    ; --- Checar Operandos Zero --- \n";
    ss << "    tst R26\n";
    ss << "    brne check_b_zero\n";
    ss << "    mov R28, R24\n";
    ss << "    mov R29, R25\n";
    ss << "    andi R29, 0x03\n";
    ss << "    or R28, R29\n";
    ss << "    brne check_b_zero\n";
    ss << "    mov R25, R20\n";
    ss << "    ldi R24, 0x00\n";
    ss << "    rjmp mul_cleanup\n";
    ss << "\n";
    ss << "check_b_zero:\n";
    ss << "    tst R27\n";
    ss << "    brne extract_mantissas\n";
    ss << "    mov R28, R22\n";
    ss << "    mov R29, R23\n";
    ss << "    andi R29, 0x03\n";
    ss << "    or R28, R29\n";
    ss << "    brne extract_mantissas\n";
    ss << "    mov R25, R20\n";
    ss << "    ldi R24, 0x00\n";
    ss << "    rjmp mul_cleanup\n";
    ss << "\n";
    ss << "extract_mantissas:\n";
    ss << "    ; --- Extrair Mantissas (11 bits com implícito) ---\n";
    ss << "    mov R18, R24\n";
    ss << "    mov R19, R25\n";
    ss << "    andi R19, 0x03\n";
    ss << "    ldi R21, 1\n";
    ss << "    tst R26\n";
    ss << "    brne norm_a\n";
    ss << "    mov R26, R21\n";
    ss << "    rjmp extract_b\n";
    ss << "norm_a:\n";
    ss << "    ori R19, 0x04\n";
    ss << "\n";
    ss << "extract_b:\n";
    ss << "    mov R16, R22\n";
    ss << "    mov R17, R23\n";
    ss << "    andi R17, 0x03\n";
    ss << "    ldi R21, 1\n";
    ss << "    tst R27\n";
    ss << "    brne norm_b\n";
    ss << "    mov R27, R21\n";
    ss << "    rjmp calc_exp\n";
    ss << "norm_b:\n";
    ss << "    ori R17, 0x04\n";
    ss << "\n";
    ss << "calc_exp:\n";
    ss << "    add R26, R27\n";
    ss << "    subi R26, 15\n";
    ss << "\n";
    ss << "    ; --- Multiplicar Mantissas (32 bits) ---\n";
    ss << "    clr R28\n";
    ss << "    clr R29\n";
    ss << "    clr R30\n";
    ss << "    clr R31\n";
    ss << "    mul R18, R16      ; AL * BL\n";
    ss << "    mov R28, r0\n";
    ss << "    mov R29, r1\n";
    ss << "    mul R18, R17      ; AL * BH\n";
    ss << "    add R29, r0\n";
    ss << "    adc R30, r1\n";
    ss << "    clr r0\n";
    ss << "    adc r31, r0\n";
    ss << "    mul R19, R16      ; AH * BL\n";
    ss << "    add R29, r0\n";
    ss << "    adc R30, r1\n";
    ss << "    clr r0\n";
    ss << "    adc r31, r0\n";
    ss << "    mul R19, R17      ; AH * BH\n";
    ss << "    add R30, r0\n";
    ss << "    adc R31, r1\n";
    ss << "\n";
    ss << "    sbrc r30, 5\n";
    ss << "    rjmp mul_did_overflow\n";
    ss << "mul_no_overflow:\n";
    ss << "    rjmp mantissa_ready\n";
    ss << "mul_did_overflow:\n";
    ss << "    lsr r31\n";
    ss << "    ror r30\n";
    ss << "    ror r29\n";
    ss << "    ror r28\n";
    ss << "    inc r26\n";
    ss << "mantissa_ready:\n";
    ss << "\n";
    ss << "mul_check_exponent:\n";
    ss << "    mov r19, r28\n";
    ss << "    or  r19, r29\n";
    ss << "    or  r19, r30\n";
    ss << "    or  r19, r31\n";
    ss << "    brne check_exp_non_zero\n";
    ss << "    mov R25, R20\n";
    ss << "    ldi R24, 0x00\n";
    ss << "    rjmp mul_cleanup\n";
    ss << "check_exp_non_zero:\n";
    ss << "    cpi R26, 31\n";
    ss << "    brsh exponent_overflow_final\n";
    ss << "    cpi R26, 1\n";
    ss << "    brsh pack_result_new\n";
    ss << "exponent_underflow_final:\n";
    ss << "    ldi R24, 0x00\n";
    ss << "    mov R25, R20\n";
    ss << "    rjmp mul_cleanup\n";
    ss << "exponent_overflow_final:\n";
    ss << "    ldi R24, 0x00\n";
    ss << "    ldi R25, 0x7C\n";
    ss << "    or R25, R20\n";
    ss << "    rjmp mul_cleanup\n";
    ss << "\n";
    ss << "pack_result_new:\n";
    ss << "    mov R25, R20\n";
    ss << "    mov R21, R26\n";
    ss << "    lsl R21\n";
    ss << "    lsl R21\n";
    ss << "    andi R21, 0x7C\n";
    ss << "    or R25, R21\n";
    ss << "    mov R21, R30\n";
    ss << "    andi R21, 0x0C\n";
    ss << "    lsr R21\n";
    ss << "    lsr R21\n";
    ss << "    or R25, R21\n";
    ss << "    mov R21, R30\n";
    ss << "    andi R21, 0x03\n";
    ss << "    lsl R21\n";
    ss << "    lsl R21\n";
    ss << "    lsl R21\n";
    ss << "    lsl R21\n";
    ss << "    lsl R21\n";
    ss << "    lsl R21\n";
    ss << "    mov R24, R21\n";
    ss << "    mov R21, R29\n";
    ss << "    andi R21, 0xFC\n";
    ss << "    lsr R21\n";
    ss << "    lsr R21\n";
    ss << "    or R24, R21\n";
    ss << "\n";
    ss << "mul_cleanup:\n";
    ss << "    pop r31\n";
    ss << "    pop r30\n";
    ss << "    pop r27\n";
    ss << "    pop r26\n";
    ss << "    pop r21\n";
    ss << "    pop r20\n";
    ss << "    pop r19\n";
    ss << "    pop r18\n";
    ss << "    ret\n";

    return ss.str();
}